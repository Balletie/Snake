#Scores
.global add_score, add_high_score, show_score

add_score:	pusha
		xor	%ebx, %ebx
		movb	score_inc, %bl
		movl	score, %eax
		addl	%ebx, %eax
		movl	%eax, score

		popa
		ret

add_high_score:	pushl	%ebp
		movl	%esp, %ebp
		pusha

		movb	score_count, %al
		movl	$4, %ecx		#\Get the correct
		mull	%ecx			#/index.
		movl	8(%ebp), %ecx
		movl	%ecx, high_score(%eax)
		incb	score_count

		popa
		leave
		ret

sort_scores:	pusha
		movl	score_count, %ecx
		xor	%edx, %edx
	loop1:	
		
	loop2:	movl	high_score(%edx), %eax
		incl	%edx
		movl	high_score(%edx), %ebx

		cmpl	%eax, %ebx
		jng	loop2
		pushl	%edx
		movl	%eax, %edx
		movl	%ebx, %eax
		movl	%edx, %ebx
		popl	%edx

		decl	%ecx
		cmpl	%ecx, %edx
		jl	loop2

show_score:	pusha
		movl	score, %eax
		movl	$vga_memory + 16, %edi
		movl	$10, %ebx
	print:	xor	%edx, %edx
		divl	%ebx
		addl	$0x30, %edx
		movb	%dl, (%edi)
		subl	$2, %edi
		test	%eax, %eax
		jnz	print

		popa
		ret
